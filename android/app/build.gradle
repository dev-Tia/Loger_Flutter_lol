def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// 속성 파일로부터 keystore 정보를 가져올 수 있도록 변경하세요.
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    print("\n"+"Key Store -> EXISTS" + "\n")
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    print("In app build.gradle keyAlias : "+ keystoreProperties['keyAlias'] + "\n")
    print("KeyStore + Key in Normal-Operation!!!" + "\n\n")
} else {
    print("Key Store -> Non EXISTS -> ERROR" + "\n\n")
}

android {
    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "gg.gaap.gaap"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    //  릴리즈 일때 자동 사인 구성
    signingConfigs {
        release {
            keyAlias System.getenv(keystoreProperties['keyAlias'])
            keyPassword System.getenv(keystoreProperties['keyPassword'])
            storeFile file(keystoreProperties['storeFile'])
            storePassword System.getenv(keystoreProperties['storePassword'])
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            // 난독화와 축소 사용하기
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            // 넣어도 되는지 모르겠다
            // TODO: release 빌드 버전을 위한 서명 구성을 추가하세요.
            // 현재는 `flutter run --release`가 디버그용 키로 서명되어 동작합니다.
            signingConfig signingConfigs.debug
        }
    }

    // APK install 할때....
    // [INSTALL_FAILED_NO_MATCHING_ABIS: Failed to extract native libraries, res=-113] 에러 발생시 해결방법
    // packagingOptions, splits 두개를 넣어서 에뮬과 IDE 간의 ADB 를 맞춰준다
    // packagingOptions {
    //     exclude 'lib/x86_64/darwin/libscrypt.dylib'
    //     exclude 'lib/x86_64/freebsd/libscrypt.so'
    //     exclude 'lib/x86_64/linux/libscrypt.so'
    // }

    // splits {
    //     abi {
    //         enable true
    //         reset()
    //         include 'x86', 'x86_64','armeabi', 'armeabi-v7a', 'mips', 'mips64', 'arm64-v8a'
    //         universalApk true
    //     }
    // }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    implementation 'com.google.android.gms:play-services-ads:18.0.0'
    // add SDKs for any other desired Firebase products
    // https://firebase.google.com/docs/android/setup#available-libraries
}
